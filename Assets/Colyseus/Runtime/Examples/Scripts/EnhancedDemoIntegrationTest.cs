using UnityEngine;
using System.Collections;

/// <summary>\n/// Enhanced Demo Integration Test - Validates all systems are working together correctly\n/// and provides runtime testing capabilities for the enhanced Akash 2D walkway demo.\n/// </summary>\npublic class EnhancedDemoIntegrationTest : MonoBehaviour\n{\n    [Header(\"Test Configuration\")]\n    [SerializeField] private bool runTestsOnStart = true;\n    [SerializeField] private bool enableDebugLogs = true;\n    [SerializeField] private float testDelay = 1f;\n\n    [Header(\"Test Results\")]\n    [SerializeField] private bool walkwaySystemTest = false;\n    [SerializeField] private bool playerMovementTest = false;\n    [SerializeField] private bool bannerSystemTest = false;\n    [SerializeField] private bool cameraSystemTest = false;\n    [SerializeField] private bool visualEffectsTest = false;\n    [SerializeField] private bool networkIntegrationTest = false;\n\n    // System references\n    private DemoGameManager demoManager;\n    private WalkwaySystem walkwaySystem;\n    private EnhancedPlayerMovement playerMovement;\n    private AkashLogoBannerSystem bannerSystem;\n    private CameraBehaviorSystem cameraSystem;\n    private VisualEffectsManager visualEffects;\n    private NetworkManager networkManager;\n\n    // Test state\n    private bool testsCompleted = false;\n    private int testsRun = 0;\n    private int testsPassed = 0;\n\n    private void Start()\n    {\n        if (runTestsOnStart)\n        {\n            StartCoroutine(RunIntegrationTests());\n        }\n    }\n\n    /// <summary>\n    /// Runs comprehensive integration tests\n    /// </summary>\n    public IEnumerator RunIntegrationTests()\n    {\n        LogTest(\"Starting Enhanced Demo Integration Tests...\");\n        \n        // Find all system components\n        FindSystemComponents();\n        \n        yield return new WaitForSeconds(testDelay);\n        \n        // Run individual system tests\n        yield return StartCoroutine(TestWalkwaySystem());\n        yield return StartCoroutine(TestPlayerMovement());\n        yield return StartCoroutine(TestBannerSystem());\n        yield return StartCoroutine(TestCameraSystem());\n        yield return StartCoroutine(TestVisualEffects());\n        yield return StartCoroutine(TestNetworkIntegration());\n        \n        // Run integration tests\n        yield return StartCoroutine(TestSystemIntegration());\n        \n        // Report results\n        ReportTestResults();\n        testsCompleted = true;\n    }\n\n    /// <summary>\n    /// Finds all required system components\n    /// </summary>\n    private void FindSystemComponents()\n    {\n        demoManager = FindObjectOfType<DemoGameManager>();\n        walkwaySystem = FindObjectOfType<WalkwaySystem>();\n        playerMovement = FindObjectOfType<EnhancedPlayerMovement>();\n        bannerSystem = FindObjectOfType<AkashLogoBannerSystem>();\n        cameraSystem = FindObjectOfType<CameraBehaviorSystem>();\n        visualEffects = FindObjectOfType<VisualEffectsManager>();\n        networkManager = FindObjectOfType<NetworkManager>();\n        \n        LogTest($\"Found components: DM={demoManager != null}, WS={walkwaySystem != null}, PM={playerMovement != null}, BS={bannerSystem != null}, CS={cameraSystem != null}, VE={visualEffects != null}, NM={networkManager != null}\");\n    }\n\n    /// <summary>\n    /// Tests walkway system functionality\n    /// </summary>\n    private IEnumerator TestWalkwaySystem()\n    {\n        testsRun++;\n        LogTest(\"Testing WalkwaySystem...\");\n        \n        if (walkwaySystem == null)\n        {\n            LogTest(\"FAIL: WalkwaySystem not found\");\n            return false;\n        }\n        \n        // Test platform generation\n        Vector2[] platforms = walkwaySystem.GetPlatformPositions();\n        bool hasPlatforms = platforms != null && platforms.Length > 0;\n        \n        // Test bounds calculation\n        Vector2 bounds = walkwaySystem.GetWalkwayBounds();\n        bool validBounds = bounds.x < bounds.y;\n        \n        // Test platform validation\n        bool canValidatePositions = walkwaySystem.IsValidPlatformPosition(Vector2.zero, 1f);\n        \n        walkwaySystemTest = hasPlatforms && validBounds;\n        \n        if (walkwaySystemTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: WalkwaySystem - {platforms.Length} platforms, bounds: {bounds}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: WalkwaySystem - platforms: {hasPlatforms}, bounds: {validBounds}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests enhanced player movement\n    /// </summary>\n    private IEnumerator TestPlayerMovement()\n    {\n        testsRun++;\n        LogTest(\"Testing EnhancedPlayerMovement...\");\n        \n        if (playerMovement == null)\n        {\n            LogTest(\"FAIL: EnhancedPlayerMovement not found\");\n            return false;\n        }\n        \n        // Test component setup\n        Rigidbody2D rb = playerMovement.GetComponent<Rigidbody2D>();\n        BoxCollider2D col = playerMovement.GetComponent<BoxCollider2D>();\n        SpriteRenderer sr = playerMovement.GetComponent<SpriteRenderer>();\n        \n        bool hasComponents = rb != null && col != null && sr != null;\n        \n        // Test movement state\n        MovementState state = playerMovement.GetMovementState();\n        bool hasValidState = !float.IsNaN(state.position.x) && !float.IsNaN(state.position.y);\n        \n        playerMovementTest = hasComponents && hasValidState;\n        \n        if (playerMovementTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: EnhancedPlayerMovement - components ok, position: {state.position}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: EnhancedPlayerMovement - components: {hasComponents}, state: {hasValidState}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests banner system functionality\n    /// </summary>\n    private IEnumerator TestBannerSystem()\n    {\n        testsRun++;\n        LogTest(\"Testing AkashLogoBannerSystem...\");\n        \n        if (bannerSystem == null)\n        {\n            LogTest(\"FAIL: AkashLogoBannerSystem not found\");\n            return false;\n        }\n        \n        // Test banner creation\n        int bannerCount = bannerSystem.GetBannerCount();\n        Vector2[] bannerPositions = bannerSystem.GetBannerPositions();\n        \n        bool hasBanners = bannerCount > 0 && bannerPositions.Length == bannerCount;\n        \n        bannerSystemTest = hasBanners;\n        \n        if (bannerSystemTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: AkashLogoBannerSystem - {bannerCount} banners created\");\n        }\n        else\n        {\n            LogTest($\"FAIL: AkashLogoBannerSystem - banner count: {bannerCount}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests camera system functionality\n    /// </summary>\n    private IEnumerator TestCameraSystem()\n    {\n        testsRun++;\n        LogTest(\"Testing CameraBehaviorSystem...\");\n        \n        if (cameraSystem == null)\n        {\n            LogTest(\"FAIL: CameraBehaviorSystem not found\");\n            return false;\n        }\n        \n        // Test camera component\n        Camera cam = cameraSystem.GetComponent<Camera>();\n        bool hasCamera = cam != null;\n        \n        // Test view bounds calculation\n        Bounds viewBounds = cameraSystem.GetCameraViewBounds();\n        bool validBounds = viewBounds.size.magnitude > 0;\n        \n        // Test position visibility\n        bool canCheckVisibility = cameraSystem.IsPositionVisible(Vector3.zero);\n        \n        cameraSystemTest = hasCamera && validBounds;\n        \n        if (cameraSystemTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: CameraBehaviorSystem - camera ok, bounds: {viewBounds.size}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: CameraBehaviorSystem - camera: {hasCamera}, bounds: {validBounds}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests visual effects system\n    /// </summary>\n    private IEnumerator TestVisualEffects()\n    {\n        testsRun++;\n        LogTest(\"Testing VisualEffectsManager...\");\n        \n        if (visualEffects == null)\n        {\n            LogTest(\"FAIL: VisualEffectsManager not found\");\n            return false;\n        }\n        \n        // Test visual bounds\n        Bounds visualBounds = visualEffects.GetVisualBounds();\n        bool validBounds = visualBounds.size.magnitude >= 0; // Can be zero initially\n        \n        // Test particle effect spawning\n        ParticleSystem testEffect = visualEffects.SpawnParticleEffect(ParticleEffectType.Sparkle, Vector3.zero);\n        bool canSpawnEffects = testEffect != null;\n        \n        visualEffectsTest = validBounds; // Basic functionality test\n        \n        if (visualEffectsTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: VisualEffectsManager - bounds ok, effects: {canSpawnEffects}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: VisualEffectsManager - bounds: {validBounds}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests network integration\n    /// </summary>\n    private IEnumerator TestNetworkIntegration()\n    {\n        testsRun++;\n        LogTest(\"Testing Network Integration...\");\n        \n        if (networkManager == null)\n        {\n            LogTest(\"WARN: NetworkManager not found - network tests skipped\");\n            networkIntegrationTest = true; // Pass if not required\n            return false;\n        }\n        \n        // Test client initialization\n        bool hasClient = networkManager.Client != null;\n        \n        // Test connection state\n        var connectionState = networkManager.CurrentConnectionState;\n        bool validState = connectionState != NetworkManager.ConnectionState.Failed;\n        \n        networkIntegrationTest = hasClient;\n        \n        if (networkIntegrationTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: Network Integration - client: {hasClient}, state: {connectionState}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: Network Integration - client: {hasClient}, state: {connectionState}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Tests system integration and coordination\n    /// </summary>\n    private IEnumerator TestSystemIntegration()\n    {\n        testsRun++;\n        LogTest(\"Testing System Integration...\");\n        \n        if (demoManager == null)\n        {\n            LogTest(\"FAIL: DemoGameManager not found\");\n            return false;\n        }\n        \n        // Test enhanced mode\n        bool isEnhanced = demoManager.IsEnhancedMode();\n        bool systemsReady = demoManager.AreEnhancedSystemsReady();\n        bool isDemoRunning = demoManager.IsDemoRunning();\n        \n        // Test special effect integration\n        if (isEnhanced)\n        {\n            demoManager.TriggerSpecialEffect();\n            yield return new WaitForSeconds(0.5f);\n        }\n        \n        bool integrationTest = isEnhanced && systemsReady;\n        \n        if (integrationTest)\n        {\n            testsPassed++;\n            LogTest($\"PASS: System Integration - enhanced: {isEnhanced}, ready: {systemsReady}, running: {isDemoRunning}\");\n        }\n        else\n        {\n            LogTest($\"FAIL: System Integration - enhanced: {isEnhanced}, ready: {systemsReady}\");\n        }\n        \n        yield return new WaitForSeconds(0.1f);\n    }\n\n    /// <summary>\n    /// Reports final test results\n    /// </summary>\n    private void ReportTestResults()\n    {\n        float successRate = testsRun > 0 ? (float)testsPassed / testsRun * 100f : 0f;\n        \n        LogTest(\"=\".PadRight(50, '='));\n        LogTest($\"ENHANCED DEMO INTEGRATION TEST RESULTS\");\n        LogTest($\"Tests Run: {testsRun}\");\n        LogTest($\"Tests Passed: {testsPassed}\");\n        LogTest($\"Success Rate: {successRate:F1}%\");\n        LogTest(\"=\".PadRight(50, '='));\n        \n        if (successRate >= 80f)\n        {\n            LogTest(\"✓ ENHANCED DEMO INTEGRATION: SUCCESSFUL\");\n            LogTest(\"The enhanced Akash 2D walkway demo is ready for demonstration!\");\n        }\n        else if (successRate >= 60f)\n        {\n            LogTest(\"⚠ ENHANCED DEMO INTEGRATION: PARTIAL\");\n            LogTest(\"Some systems may not be fully functional. Check individual test results.\");\n        }\n        else\n        {\n            LogTest(\"✗ ENHANCED DEMO INTEGRATION: FAILED\");\n            LogTest(\"Major systems are not functioning correctly. Review implementation.\");\n        }\n    }\n\n    /// <summary>\n    /// Logs test messages\n    /// </summary>\n    private void LogTest(string message)\n    {\n        if (enableDebugLogs)\n        {\n            Debug.Log($\"[EnhancedDemo Test] {message}\");\n        }\n    }\n\n    /// <summary>\n    /// Manual test trigger for runtime validation\n    /// </summary>\n    [ContextMenu(\"Run Integration Tests\")]\n    public void ManualTestTrigger()\n    {\n        if (!testsCompleted)\n        {\n            StartCoroutine(RunIntegrationTests());\n        }\n        else\n        {\n            ReportTestResults();\n        }\n    }\n\n    /// <summary>\n    /// Gets test completion status\n    /// </summary>\n    public bool AreTestsCompleted()\n    {\n        return testsCompleted;\n    }\n\n    /// <summary>\n    /// Gets test success rate\n    /// </summary>\n    public float GetSuccessRate()\n    {\n        return testsRun > 0 ? (float)testsPassed / testsRun * 100f : 0f;\n    }\n\n    private void OnGUI()\n    {\n        if (!Application.isPlaying) return;\n        \n        // Show test status in corner\n        GUILayout.BeginArea(new Rect(Screen.width - 300, 10, 290, 200));\n        GUILayout.Label(\"Enhanced Demo Test Status\");\n        \n        GUILayout.Label($\"Tests: {testsPassed}/{testsRun} ({(testsRun > 0 ? (float)testsPassed / testsRun * 100f : 0f):F1}%)\");\n        \n        if (testsCompleted)\n        {\n            GUILayout.Label(\"Status: COMPLETED\");\n        }\n        else\n        {\n            GUILayout.Label(\"Status: RUNNING...\");\n        }\n        \n        if (GUILayout.Button(\"Run Tests\"))\n        {\n            ManualTestTrigger();\n        }\n        \n        GUILayout.Space(10);\n        GUILayout.Label(\"Individual Systems:\");\n        GUILayout.Label($\"Walkway: {(walkwaySystemTest ? \"✓\" : \"✗\")}\");\n        GUILayout.Label($\"Movement: {(playerMovementTest ? \"✓\" : \"✗\")}\");\n        GUILayout.Label($\"Banners: {(bannerSystemTest ? \"✓\" : \"✗\")}\");\n        GUILayout.Label($\"Camera: {(cameraSystemTest ? \"✓\" : \"✗\")}\");\n        GUILayout.Label($\"Visual FX: {(visualEffectsTest ? \"✓\" : \"✗\")}\");\n        GUILayout.Label($\"Network: {(networkIntegrationTest ? \"✓\" : \"✗\")}\");\n        \n        GUILayout.EndArea();\n    }\n}